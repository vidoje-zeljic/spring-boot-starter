name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE: ghcr.io/vidoje-zeljic/spring-boot-starter:main
  AZ_GROUP: vidoje_group
  AZ_APP_SERVICE: be-vidoje
  AZ_APP_SERVICE_PLAN: Free

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  java-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build and Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: target/*.jar
          retention-days: 1

  docker-build-push:
    if: github.event_name != 'pull_request'
    needs: java-build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: Package
          path: target
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker build . -t ${{ env.IMAGE }}
          docker push ${{ env.IMAGE }}

  deploy:
    if: github.event_name != 'pull_request'
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: cicd
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Deploy App
        run: |
          az webapp create -g ${{ env.AZ_GROUP }} -n ${{ env.AZ_APP_SERVICE }} -p ${{ env.AZ_APP_SERVICE_PLAN }} -i ${{ env.IMAGE }}
          az webapp config appsettings set -g ${{ env.AZ_GROUP }} -n ${{ env.AZ_APP_SERVICE }} --settings SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          az webapp restart -g ${{ env.AZ_GROUP }} -n ${{ env.AZ_APP_SERVICE }}
